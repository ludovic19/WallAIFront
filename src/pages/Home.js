import { useState, useEffect } from "react";
import Loader from "../components/Loader";
import Card from "../components/Card";
import FormField from "../components/FormField";
import { Link } from "react-router-dom";

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }
  return (
    <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch("http://localhost:8080/api/post", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      // si réponse =OK set le state avec la data en sens inverse de création pour que la derniere créée soit le plus haut
      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (error) {
      alert(error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearch = (e) => {
    clearTimeout(searchTimeout);

    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  return (
    <>
      <section className="max-w-7xl mx-auto text-center">
        <div className="w-full flex justify-end items-center bg-[#f9fafe] sm:px-8 px-4 py-4 ">
          <Link
            to="/profile"
            className="font-inter front-medium bg-[#6469ff] w-25 text-white px-4 py-2 rounded-md"
          >
            My Wall
          </Link>
        </div>
        <div>
          <h1 className="font-extrabold text-[#222328] text-[32px]">
            The Community Wall
          </h1>
          <p className="mt-2 text-[#666e75] text-[16px] max-w[500px]">
            Browse through a collection of imaginative and visually stunning
            images generated by Wall AI
          </p>
        </div>
        <div className="mt-16">
          <FormField
            labelName="Search posts"
            type="text"
            name="text"
            placeholder="Search by user or keyword"
            value={searchText}
            handleChange={handleSearch}
          />
        </div>
        <div className="mt-10">
          {loading ? (
            <div className="flex justify-center items-center">
              <Loader />
            </div>
          ) : (
            <>
              {searchText && (
                <h2 className="font-medium text-[#666e75] text-xl mb-3">
                  Showing results for{" "}
                  <span className="text-[#222328]">{searchText}</span>
                </h2>
              )}
              <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3 ">
                {searchText ? (
                  <RenderCards
                    data={searchedResults}
                    title="No search results found"
                  />
                ) : (
                  <RenderCards data={allPosts} title="No posts found" />
                )}
              </div>
            </>
          )}
        </div>
      </section>
    </>
  );
};

export default Home;
